"use strict";(self.webpackChunkscrap_computers_docs=self.webpackChunkscrap_computers_docs||[]).push([[7068],{4082:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"community-mods/MT Fast Logic/mtfastmemory","title":"MTFastMemory","description":"MTFastMemory Documentation","source":"@site/docs/community-mods/MT Fast Logic/mtfastmemory.md","sourceDirName":"community-mods/MT Fast Logic","slug":"/community-mods/MT Fast Logic/mtfastmemory","permalink":"/docs/community-mods/MT Fast Logic/mtfastmemory","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"MTFastMemory","description":"MTFastMemory Documentation"},"sidebar":"communityModsSidebar","previous":{"title":"MT Fast Logic","permalink":"/docs/category/mt-fast-logic"},"next":{"title":"Home","permalink":"/docs/community-mods/"}}');var t=s(4848),l=s(8453);const o={title:"MTFastMemory",description:"MTFastMemory Documentation"},i=void 0,c={},a=[{value:"Functions",id:"functions",level:2},{value:"setValue",id:"setvalue",level:3},{value:"getValue",id:"getvalue",level:3},{value:"setValues",id:"setvalues",level:3},{value:"getValues",id:"getvalues",level:3},{value:"clearMemory",id:"clearmemory",level:3},{value:"setMemory",id:"setmemory",level:3},{value:"getMemory",id:"getmemory",level:3}];function d(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["MTFastMemory is a interface for the ",(0,t.jsx)(n.code,{children:"Fast Logic Memory"})," interactable in the mod which allows highly compact memory which is usuable with interface blocks and computers."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"setvalue",children:"setValue"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"MTFastMemory:setValue(key, value)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Sets the value of a single key in the memory block."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["key [ ",(0,t.jsx)(n.strong,{children:"number"})," ] The key to write to."]}),"\n",(0,t.jsxs)(n.li,{children:["value [ ",(0,t.jsx)(n.strong,{children:"number"})," ] The value to store."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"getvalue",children:"getValue"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"MTFastMemory:getValue(key)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Retrieves the value stored at a specific key in the memory block."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["key [ ",(0,t.jsx)(n.strong,{children:"number"})," ] The key to read from."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[ ",(0,t.jsx)(n.strong,{children:"number"})," ] The value stored at the key, or ",(0,t.jsx)(n.code,{children:"0"})," if the key does not exist."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"setvalues",children:"setValues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"MTFastMemory:setValues(kvPairs)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Sets values for multiple keys at once."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["kvPair` [ ",(0,t.jsx)(n.strong,{children:"table<number, number>"})," ] A table of key-value pairs to store."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"getvalues",children:"getValues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"MTFastMemory:getValues(keys)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Retrieves the values for multiple keys."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["keys [ ",(0,t.jsx)(n.strong,{children:"number[]"})," ] An array of keys to read."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[ ",(0,t.jsx)(n.strong,{children:"number[]"})," ] An array of values corresponding to the given keys."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"clearmemory",children:"clearMemory"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"MTFastMemory:clearMemory()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Clears all data from the memory block."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"setmemory",children:"setMemory"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"MTFastMemory:setMemory(memory)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Overwrites the entire memory block with a new table.",(0,t.jsx)(n.br,{}),"\n","Equivalent to calling ",(0,t.jsx)(n.a,{href:"#clearmemory",children:(0,t.jsx)(n.code,{children:"clearMemory"})})," followed by ",(0,t.jsx)(n.a,{href:"#setvalues",children:(0,t.jsx)(n.code,{children:"setValues"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["memory [ ",(0,t.jsx)(n.strong,{children:"table<number, number>"})," ] The new memory contents."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"getmemory",children:"getMemory"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"MTFastMemory:getMemory()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns the current contents of the memory block."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[ ",(0,t.jsx)(n.strong,{children:"table<number, number>"})," ] A table representing the full memory contents."]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var r=s(6540);const t={},l=r.createContext(t);function o(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);