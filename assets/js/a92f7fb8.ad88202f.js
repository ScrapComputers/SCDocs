"use strict";(self.webpackChunkscrap_computers_docs=self.webpackChunkscrap_computers_docs||[]).push([[7020],{105:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"Addon API/modules/errorhandler","title":"ErrorHandler","description":"Lets you handle errors","source":"@site/docs/Addon API/modules/errorhandler.md","sourceDirName":"Addon API/modules","slug":"/Addon API/modules/errorhandler","permalink":"/docs/Addon API/modules/errorhandler","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"ErrorHandler","description":"Lets you handle errors"},"sidebar":"sidebar","previous":{"title":"Color","permalink":"/docs/Addon API/modules/color"},"next":{"title":"Json","permalink":"/docs/Addon API/modules/json"}}');var t=n(4848),o=n(8453);const l={title:"ErrorHandler",description:"Lets you handle errors"},i=void 0,d={},a=[{value:"Functions",id:"functions",level:2},{value:"assert",id:"assert",level:3},{value:"assertArgument",id:"assertargument",level:3}];function c(e){const r={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"ScrapComputer's Computer API is qutie big, So this error handler is used for the Computer API's function error handling. Use this for your functions, its quite powerful!"}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(r.h3,{id:"assert",children:"assert"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"sm.scrapcomputers.errorHandler.assert( value, argumentIndex, str, ... )\n"})}),"\n",(0,t.jsx)(r.p,{children:"A better assert function"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Arguments:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["value [ ",(0,t.jsx)(r.strong,{children:"any"})," ] The value to check"]}),"\n",(0,t.jsxs)(r.li,{children:["argumentIndex [ ",(0,t.jsx)(r.strong,{children:"integer?"})," ]The index where this value was"]}),"\n",(0,t.jsxs)(r.li,{children:["str [ ",(0,t.jsx)(r.strong,{children:"string"})," ] The message when it errors"]}),"\n",(0,t.jsxs)(r.li,{children:["... [ ",(0,t.jsx)(r.strong,{children:"any[]"})," ] The arguments for str"]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"assertargument",children:"assertArgument"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"sm.scrapcomputers.errorHandler.assertArgument( value, argumentIndex, allowedTypes, nameOverwrites )\n"})}),"\n",(0,t.jsx)(r.p,{children:"A assert function for function arguments!"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Arguments:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["value [ ",(0,t.jsx)(r.strong,{children:"any"})," ] The value to check"]}),"\n",(0,t.jsxs)(r.li,{children:["argumentIndex [ ",(0,t.jsx)(r.strong,{children:"number?"})," ] If your function has multiple arguments, fill this with the argument index, So let say your checking the 3rd argument. Set this to 3."]}),"\n",(0,t.jsxs)(r.li,{children:["allowedTypes [ ",(0,t.jsx)(r.strong,{children:"type[]"})," ] Contains all allowed types"]}),"\n",(0,t.jsxs)(r.li,{children:["nameOverwrites [ ",(0,t.jsx)(r.strong,{children:"string[]?"})," ] This lets you modify the error message arguments. Basicly the words afther Expected. If you dont want to modify a argument name, Set that value in the table to nil and else a string."]}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>i});var s=n(6540);const t={},o=s.createContext(t);function l(e){const r=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);